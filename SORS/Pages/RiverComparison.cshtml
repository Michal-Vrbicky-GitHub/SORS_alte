@page
@model SORS.Pages.RiverComparisonModel
@{
    ViewData["Title"] = "River Comparison";
}

<h1>River Comparison</h1>

<canvas id="riverChart" width="400" height="160"></canvas>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var ctx = document.getElementById('riverChart').getContext('2d');
        var stationNames = @Html.Raw(Json.Serialize(Model.StationNames));
        var minValues = @Html.Raw(Json.Serialize(Model.MinValues));
        var latestValues = @Html.Raw(Json.Serialize(Model.LatestValues));
        var maxValues = @Html.Raw(Json.Serialize(Model.MaxValues));

        var riverChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: stationNames,
                datasets: [
                    {
                        label: 'Min Value',
                        data: minValues,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Latest Value',
                        data: latestValues,
                        backgroundColor: 'rgba(255, 159, 64, 0.2)',
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Max Value',
                        data: maxValues,
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        async function fetchData() {
            try {
                let response = await fetch('@Url.Page("/RiverComparison", new { handler = "Json" })');
                let data = await response.json();
                riverChart.data.labels = data.stationNames;
                riverChart.data.datasets[0].data = data.minValues;
                riverChart.data.datasets[1].data = data.latestValues;
                riverChart.data.datasets[2].data = data.maxValues;
                riverChart.update();
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }
        fetchData();
        setInterval(fetchData, 8000);
    </script>
}
